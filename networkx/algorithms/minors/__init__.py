"""
Subpackages related to graph-minor problems.

In graph theory, an undirected graph H is called a minor of the graph G if H
can be formed from G by deleting edges and vertices and by contracting edges
[1]_.

References
----------
.. [1] https://en.wikipedia.org/wiki/Graph_minor
"""

__submodules__ = [
    "contraction",
    "tree_embedding",
]

# The following is autogenerated by mkinit
# mkinit networkx.algorithms.minors --black -w --lazy


def lazy_import(module_name, submodules, submod_attrs):
    import sys
    import importlib
    import importlib.util

    all_funcs = []
    for mod, funcs in submod_attrs.items():
        all_funcs.extend(funcs)
    name_to_submod = {
        func: mod for mod, funcs in submod_attrs.items() for func in funcs
    }

    def require(fullname):
        if fullname in sys.modules:
            return sys.modules[fullname]
        spec = importlib.util.find_spec(fullname)
        try:
            module = importlib.util.module_from_spec(spec)
        except Exception:
            raise ImportError(
                "Could not lazy import module {fullname}".format(fullname=fullname)
            ) from None
        loader = importlib.util.LazyLoader(spec.loader)
        sys.modules[fullname] = module
        loader.exec_module(module)
        return module

    def __getattr__(name):
        if name in submodules:
            fullname = "{module_name}.{name}".format(module_name=module_name, name=name)
            attr = require(fullname)
        elif name in name_to_submod:
            modname = name_to_submod[name]
            module = importlib.import_module(
                "{module_name}.{modname}".format(
                    module_name=module_name, modname=modname
                )
            )
            attr = getattr(module, name)
        else:
            raise AttributeError(
                "No {module_name} attribute {name}".format(
                    module_name=module_name, name=name
                )
            )
        globals()[name] = attr
        return attr

    return __getattr__


__getattr__ = lazy_import(
    __name__,
    submodules={
        "contraction",
        "tree_embedding",
    },
    submod_attrs={
        "contraction": [
            "contracted_edge",
            "contracted_nodes",
            "equivalence_classes",
            "identified_nodes",
            "quotient_graph",
        ],
        "tree_embedding": [
            "maximum_common_ordered_subtree_embedding",
        ],
    },
)


def __dir__():
    return __all__


__all__ = [
    "contracted_edge",
    "contracted_nodes",
    "contraction",
    "equivalence_classes",
    "identified_nodes",
    "maximum_common_ordered_subtree_embedding",
    "quotient_graph",
    "tree_embedding",
]
