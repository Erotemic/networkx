def lazy_import(module_name, submodules, submod_attrs):
    import sys
    import importlib
    import importlib.util

    all_funcs = []
    for mod, funcs in submod_attrs.items():
        all_funcs.extend(funcs)
    name_to_submod = {
        func: mod for mod, funcs in submod_attrs.items() for func in funcs
    }

    def require(fullname):
        if fullname in sys.modules:
            return sys.modules[fullname]
        spec = importlib.util.find_spec(fullname)
        try:
            module = importlib.util.module_from_spec(spec)
        except Exception:
            raise ImportError(
                "Could not lazy import module {fullname}".format(fullname=fullname)
            ) from None
        loader = importlib.util.LazyLoader(spec.loader)
        sys.modules[fullname] = module
        loader.exec_module(module)
        return module

    def __getattr__(name):
        if name in submodules:
            fullname = "{module_name}.{name}".format(module_name=module_name, name=name)
            attr = require(fullname)
        elif name in name_to_submod:
            modname = name_to_submod[name]
            module = importlib.import_module(
                "{module_name}.{modname}".format(
                    module_name=module_name, modname=modname
                )
            )
            attr = getattr(module, name)
        else:
            raise AttributeError(
                "No {module_name} attribute {name}".format(
                    module_name=module_name, name=name
                )
            )
        globals()[name] = attr
        return attr

    return __getattr__


__getattr__ = lazy_import(
    __name__,
    submodules={
        "test_asteroidal",
        "test_boundary",
        "test_bridges",
        "test_chains",
        "test_chordal",
        "test_clique",
        "test_cluster",
        "test_communicability",
        "test_core",
        "test_covering",
        "test_cuts",
        "test_cycles",
        "test_d_separation",
        "test_dag",
        "test_distance_measures",
        "test_distance_regular",
        "test_dominance",
        "test_dominating",
        "test_efficiency",
        "test_euler",
        "test_graph_hashing",
        "test_graphical",
        "test_hierarchy",
        "test_hybrid",
        "test_isolate",
        "test_link_prediction",
        "test_lowest_common_ancestors",
        "test_matching",
        "test_max_weight_clique",
        "test_minors",
        "test_mis",
        "test_moral",
        "test_non_randomness",
        "test_planar_drawing",
        "test_planarity",
        "test_reciprocity",
        "test_regular",
        "test_richclub",
        "test_similarity",
        "test_simple_paths",
        "test_smallworld",
        "test_smetric",
        "test_sparsifiers",
        "test_structuralholes",
        "test_summarization",
        "test_swap",
        "test_threshold",
        "test_tournament",
        "test_triads",
        "test_vitality",
        "test_voronoi",
        "test_wiener",
    },
    submod_attrs={
        "test_asteroidal": [
            "test_is_at_free",
        ],
        "test_boundary": [
            "TestEdgeBoundary",
            "TestNodeBoundary",
        ],
        "test_bridges": [
            "TestBridges",
            "TestLocalBridges",
        ],
        "test_chains": [
            "TestChainDecomposition",
            "cycles",
            "cyclic_equals",
        ],
        "test_chordal": [
            "TestMCS",
        ],
        "test_clique": [
            "TestCliques",
            "TestEnumerateAllCliques",
        ],
        "test_cluster": [
            "TestClustering",
            "TestDirectedClustering",
            "TestDirectedWeightedClustering",
            "TestGeneralizedDegree",
            "TestSquareClustering",
            "TestTransitivity",
            "TestTriangles",
            "TestWeightedClustering",
            "test_average_clustering",
        ],
        "test_communicability": [
            "TestCommunicability",
        ],
        "test_core": [
            "TestCore",
        ],
        "test_covering": [
            "TestIsEdgeCover",
            "TestMinEdgeCover",
        ],
        "test_cuts": [
            "TestBoundaryExpansion",
            "TestConductance",
            "TestCutSize",
            "TestEdgeExpansion",
            "TestMixingExpansion",
            "TestNodeExpansion",
            "TestNormalizedCutSize",
            "TestVolume",
        ],
        "test_cycles": [
            "FORWARD",
            "REVERSE",
            "TestCycles",
            "TestFindCycle",
            "TestMinimumCycles",
            "assert_basis_equal",
        ],
        "test_d_separation": [
            "asia_graph",
            "asia_graph_fixture",
            "collider_graph",
            "collider_graph_fixture",
            "fork_graph",
            "fork_graph_fixture",
            "naive_bayes_graph",
            "naive_bayes_graph_fixture",
            "path_graph",
            "path_graph_fixture",
            "test_asia_graph_dsep",
            "test_collider_graph_dsep",
            "test_cyclic_graphs_raise_error",
            "test_fork_graph_dsep",
            "test_invalid_nodes_raise_error",
            "test_markov_condition",
            "test_naive_bayes_dsep",
            "test_path_graph_dsep",
            "test_undirected_graphs_are_not_supported",
        ],
        "test_dag": [
            "TestDAG",
            "TestDagLongestPath",
            "TestDagLongestPathLength",
            "TestDagToBranching",
            "test_is_aperiodic_bipartite",
            "test_is_aperiodic_cycle",
            "test_is_aperiodic_cycle2",
            "test_is_aperiodic_cycle3",
            "test_is_aperiodic_cycle4",
            "test_is_aperiodic_disconnected",
            "test_is_aperiodic_disconnected2",
            "test_is_aperiodic_raise",
            "test_is_aperiodic_rary_tree",
            "test_is_aperiodic_selfloop",
        ],
        "test_distance_measures": [
            "TestBarycenter",
            "TestDistance",
            "TestResistanceDistance",
        ],
        "test_distance_regular": [
            "TestDistanceRegular",
            "TestStronglyRegular",
        ],
        "test_dominance": [
            "TestDominanceFrontiers",
            "TestImmediateDominators",
        ],
        "test_dominating": [
            "test_complete",
            "test_dominating_set",
            "test_is_dominating_set",
            "test_raise_dominating_set",
            "test_wikipedia_is_dominating_set",
        ],
        "test_efficiency": [
            "TestEfficiency",
        ],
        "test_euler": [
            "TestEulerianCircuit",
            "TestEulerianPath",
            "TestEulerize",
            "TestFindPathStart",
            "TestHasEulerianPath",
            "TestIsEulerian",
            "TestIsSemiEulerian",
        ],
        "test_graph_hashing": [
            "test_directed",
            "test_empty_graph_hash",
            "test_relabel",
        ],
        "test_graphical": [
            "TestAtlas",
            "test_directed_degree_sequence",
            "test_multi_sequence",
            "test_negative_input",
            "test_non_integer_input",
            "test_numpy_degree_sequence",
            "test_pseudo_sequence",
            "test_small_directed_sequences",
            "test_small_graph_false",
            "test_small_graph_true",
            "test_string_input",
            "test_valid_degree_sequence1",
            "test_valid_degree_sequence2",
        ],
        "test_hierarchy": [
            "test_hierarchy_1",
            "test_hierarchy_cycle",
            "test_hierarchy_exception",
            "test_hierarchy_tree",
            "test_hierarchy_weight",
        ],
        "test_hybrid": [
            "test_2d_grid_graph",
            "test_small_graph",
        ],
        "test_isolate": [
            "test_is_isolate",
            "test_isolates",
            "test_number_of_isolates",
        ],
        "test_link_prediction": [
            "TestAdamicAdarIndex",
            "TestCNSoundarajanHopcroft",
            "TestJaccardCoefficient",
            "TestPreferentialAttachment",
            "TestRAIndexSoundarajanHopcroft",
            "TestResourceAllocationIndex",
            "TestWithinInterCluster",
        ],
        "test_lowest_common_ancestors": [
            "TestDAGLCA",
            "TestTreeLCA",
            "all_pairs_lca",
            "get_pair",
            "tree_all_pairs_lca",
        ],
        "test_matching": [
            "TestIsMatching",
            "TestIsMaximalMatching",
            "TestIsPerfectMatching",
            "TestMaxWeightMatching",
            "TestMaximalMatching",
        ],
        "test_max_weight_clique": [
            "TEST_CASES",
            "TestMaximumWeightClique",
            "disconnected",
            "empty_graph",
            "one_node_graph",
            "three_node_clique",
            "three_node_independent_set",
            "two_node_graph",
            "verify_clique",
        ],
        "test_minors": [
            "TestContraction",
            "TestQuotient",
        ],
        "test_mis": [
            "TestMaximalIndependantSet",
        ],
        "test_moral": [
            "test_get_moral_graph",
        ],
        "test_non_randomness": [
            "np",
            "test_non_randomness",
        ],
        "test_planar_drawing": [
            "Vector",
            "check_edge_intersections",
            "check_embedding_data",
            "check_triangulation",
            "is_close",
            "planar_drawing_conforms_to_embedding",
            "point_in_between",
            "test_circle_graph",
            "test_graph1",
            "test_graph2",
            "test_grid_graph",
            "test_invalid_half_edge",
            "test_multiple_component_graph1",
            "test_multiple_component_graph2",
            "test_one_node_graph",
            "test_three_node_graph",
            "test_triangulate_embedding1",
            "test_triangulate_embedding2",
            "test_two_node_graph",
        ],
        "test_planarity": [
            "TestLRPlanarity",
            "TestPlanarEmbeddingClass",
            "check_counterexample",
            "check_embedding",
        ],
        "test_reciprocity": [
            "TestReciprocity",
        ],
        "test_regular": [
            "TestIsKRegular",
            "TestIsRegular",
            "TestKFactor",
        ],
        "test_richclub": [
            "test_rich_club_exception2",
            "test_richclub",
            "test_richclub2",
            "test_richclub3",
            "test_richclub4",
            "test_richclub_exception",
            "test_richclub_normalized",
            "test_richclub_seed",
        ],
        "test_similarity": [
            "TestSimilarity",
            "ematch",
            "getCanonical",
            "nmatch",
        ],
        "test_simple_paths": [
            "TestIsSimplePath",
            "hamiltonian_edge_path",
            "hamiltonian_path",
            "test_Greg_Bernstein",
            "test_all_simple_edge_paths",
            "test_all_simple_edge_paths_corner_cases",
            "test_all_simple_edge_paths_cutoff",
            "test_all_simple_edge_paths_directed",
            "test_all_simple_edge_paths_empty",
            "test_all_simple_edge_paths_ignores_cycle",
            "test_all_simple_edge_paths_multigraph",
            "test_all_simple_edge_paths_multigraph_with_cutoff",
            "test_all_simple_edge_paths_on_non_trivial_graph",
            "test_all_simple_edge_paths_source_target",
            "test_all_simple_edge_paths_with_two_targets_cutoff",
            "test_all_simple_edge_paths_with_two_targets_emits_two_paths",
            "test_all_simple_edge_paths_with_two_targets_in_line_emits_two_paths",
            "test_all_simple_edge_paths_with_two_targets_inside_cycle_emits_two_paths",
            "test_all_simple_paths",
            "test_all_simple_paths_corner_cases",
            "test_all_simple_paths_cutoff",
            "test_all_simple_paths_directed",
            "test_all_simple_paths_empty",
            "test_all_simple_paths_ignores_cycle",
            "test_all_simple_paths_multigraph",
            "test_all_simple_paths_multigraph_with_cutoff",
            "test_all_simple_paths_on_non_trivial_graph",
            "test_all_simple_paths_source_target",
            "test_all_simple_paths_with_two_targets_cutoff",
            "test_all_simple_paths_with_two_targets_emits_two_paths",
            "test_all_simple_paths_with_two_targets_in_line_emits_two_paths",
            "test_all_simple_paths_with_two_targets_inside_cycle_emits_two_paths",
            "test_bidirectional_dijksta_restricted",
            "test_bidirectional_dijkstra_ignore",
            "test_bidirectional_dijkstra_no_path",
            "test_bidirectional_shortest_path_ignore",
            "test_bidirectional_shortest_path_restricted_cycle",
            "test_bidirectional_shortest_path_restricted_directed_cycle",
            "test_bidirectional_shortest_path_restricted_wheel",
            "test_cutoff_zero",
            "test_digraph_all_simple_edge_paths_with_two_targets_cutoff",
            "test_digraph_all_simple_edge_paths_with_two_targets_emits_two_paths",
            "test_digraph_all_simple_paths_with_two_targets_cutoff",
            "test_digraph_all_simple_paths_with_two_targets_emits_two_paths",
            "test_directed_weighted_shortest_simple_path",
            "test_directed_weighted_shortest_simple_path_issue2427",
            "test_edge_cutoff_zero",
            "test_edge_source_missing",
            "test_edge_target_missing",
            "test_hamiltonian__edge_path",
            "test_hamiltonian_path",
            "test_shortest_simple_paths",
            "test_shortest_simple_paths_directed",
            "test_shortest_simple_paths_directed_with_weight_fucntion",
            "test_shortest_simple_paths_with_weight_fucntion",
            "test_source_missing",
            "test_ssp_multigraph",
            "test_ssp_source_missing",
            "test_ssp_source_missing2",
            "test_ssp_target_missing",
            "test_target_missing",
            "test_weight_name",
            "test_weighted_shortest_simple_path",
            "test_weighted_shortest_simple_path_issue2427",
            "validate_length_path",
            "validate_path",
        ],
        "test_smallworld": [
            "rng",
            "test_lattice_reference",
            "test_omega",
            "test_random_reference",
            "test_sigma",
        ],
        "test_smetric": [
            "test_normalized",
            "test_smetric",
        ],
        "test_sparsifiers": [
            "test_spanner_invalid_stretch",
            "test_spanner_trivial",
            "test_spanner_unweighted_complete_graph",
            "test_spanner_unweighted_disconnected_graph",
            "test_spanner_unweighted_gnp_graph",
            "test_spanner_weighted_complete_graph",
            "test_spanner_weighted_gnp_graph",
        ],
        "test_structuralholes": [
            "TestStructuralHoles",
        ],
        "test_summarization": [
            "TestDirectedDedensification",
            "TestUnDirectedDedensification",
        ],
        "test_swap": [
            "test_connected_double_edge_swap",
            "test_connected_double_edge_swap_not_connected",
            "test_connected_double_edge_swap_small",
            "test_degree_seq_c4",
            "test_double_edge_swap",
            "test_double_edge_swap_seed",
            "test_double_edge_swap_small",
            "test_double_edge_swap_tries",
        ],
        "test_threshold": [
            "TestGeneratorThreshold",
            "cnlti",
        ],
        "test_tournament": [
            "TestHamiltonianPath",
            "TestIsTournament",
            "TestRandomTournament",
            "TestReachability",
            "TestStronglyConnected",
        ],
        "test_triads": [
            "test_all_triads",
            "test_all_triplets",
            "test_is_triad",
            "test_random_triad",
            "test_triad_type",
            "test_triadic_census",
            "test_triadic_census_nodelist",
            "test_triads_by_type",
        ],
        "test_vitality": [
            "TestClosenessVitality",
        ],
        "test_voronoi": [
            "TestVoronoiCells",
        ],
        "test_wiener": [
            "TestWienerIndex",
        ],
    },
)


def __dir__():
    return __all__


__all__ = [
    "FORWARD",
    "REVERSE",
    "TEST_CASES",
    "TestAdamicAdarIndex",
    "TestAtlas",
    "TestBarycenter",
    "TestBoundaryExpansion",
    "TestBridges",
    "TestCNSoundarajanHopcroft",
    "TestChainDecomposition",
    "TestCliques",
    "TestClosenessVitality",
    "TestClustering",
    "TestCommunicability",
    "TestConductance",
    "TestContraction",
    "TestCore",
    "TestCutSize",
    "TestCycles",
    "TestDAG",
    "TestDAGLCA",
    "TestDagLongestPath",
    "TestDagLongestPathLength",
    "TestDagToBranching",
    "TestDirectedClustering",
    "TestDirectedDedensification",
    "TestDirectedWeightedClustering",
    "TestDistance",
    "TestDistanceRegular",
    "TestDominanceFrontiers",
    "TestEdgeBoundary",
    "TestEdgeExpansion",
    "TestEfficiency",
    "TestEnumerateAllCliques",
    "TestEulerianCircuit",
    "TestEulerianPath",
    "TestEulerize",
    "TestFindCycle",
    "TestFindPathStart",
    "TestGeneralizedDegree",
    "TestGeneratorThreshold",
    "TestHamiltonianPath",
    "TestHasEulerianPath",
    "TestImmediateDominators",
    "TestIsEdgeCover",
    "TestIsEulerian",
    "TestIsKRegular",
    "TestIsMatching",
    "TestIsMaximalMatching",
    "TestIsPerfectMatching",
    "TestIsRegular",
    "TestIsSemiEulerian",
    "TestIsSimplePath",
    "TestIsTournament",
    "TestJaccardCoefficient",
    "TestKFactor",
    "TestLRPlanarity",
    "TestLocalBridges",
    "TestMCS",
    "TestMaxWeightMatching",
    "TestMaximalIndependantSet",
    "TestMaximalMatching",
    "TestMaximumWeightClique",
    "TestMinEdgeCover",
    "TestMinimumCycles",
    "TestMixingExpansion",
    "TestNodeBoundary",
    "TestNodeExpansion",
    "TestNormalizedCutSize",
    "TestPlanarEmbeddingClass",
    "TestPreferentialAttachment",
    "TestQuotient",
    "TestRAIndexSoundarajanHopcroft",
    "TestRandomTournament",
    "TestReachability",
    "TestReciprocity",
    "TestResistanceDistance",
    "TestResourceAllocationIndex",
    "TestSimilarity",
    "TestSquareClustering",
    "TestStronglyConnected",
    "TestStronglyRegular",
    "TestStructuralHoles",
    "TestTransitivity",
    "TestTreeLCA",
    "TestTriangles",
    "TestUnDirectedDedensification",
    "TestVolume",
    "TestVoronoiCells",
    "TestWeightedClustering",
    "TestWienerIndex",
    "TestWithinInterCluster",
    "Vector",
    "all_pairs_lca",
    "asia_graph",
    "asia_graph_fixture",
    "assert_basis_equal",
    "check_counterexample",
    "check_edge_intersections",
    "check_embedding",
    "check_embedding_data",
    "check_triangulation",
    "cnlti",
    "collider_graph",
    "collider_graph_fixture",
    "cycles",
    "cyclic_equals",
    "disconnected",
    "ematch",
    "empty_graph",
    "fork_graph",
    "fork_graph_fixture",
    "getCanonical",
    "get_pair",
    "hamiltonian_edge_path",
    "hamiltonian_path",
    "is_close",
    "naive_bayes_graph",
    "naive_bayes_graph_fixture",
    "nmatch",
    "np",
    "one_node_graph",
    "path_graph",
    "path_graph_fixture",
    "planar_drawing_conforms_to_embedding",
    "point_in_between",
    "rng",
    "test_2d_grid_graph",
    "test_Greg_Bernstein",
    "test_all_simple_edge_paths",
    "test_all_simple_edge_paths_corner_cases",
    "test_all_simple_edge_paths_cutoff",
    "test_all_simple_edge_paths_directed",
    "test_all_simple_edge_paths_empty",
    "test_all_simple_edge_paths_ignores_cycle",
    "test_all_simple_edge_paths_multigraph",
    "test_all_simple_edge_paths_multigraph_with_cutoff",
    "test_all_simple_edge_paths_on_non_trivial_graph",
    "test_all_simple_edge_paths_source_target",
    "test_all_simple_edge_paths_with_two_targets_cutoff",
    "test_all_simple_edge_paths_with_two_targets_emits_two_paths",
    "test_all_simple_edge_paths_with_two_targets_in_line_emits_two_paths",
    "test_all_simple_edge_paths_with_two_targets_inside_cycle_emits_two_paths",
    "test_all_simple_paths",
    "test_all_simple_paths_corner_cases",
    "test_all_simple_paths_cutoff",
    "test_all_simple_paths_directed",
    "test_all_simple_paths_empty",
    "test_all_simple_paths_ignores_cycle",
    "test_all_simple_paths_multigraph",
    "test_all_simple_paths_multigraph_with_cutoff",
    "test_all_simple_paths_on_non_trivial_graph",
    "test_all_simple_paths_source_target",
    "test_all_simple_paths_with_two_targets_cutoff",
    "test_all_simple_paths_with_two_targets_emits_two_paths",
    "test_all_simple_paths_with_two_targets_in_line_emits_two_paths",
    "test_all_simple_paths_with_two_targets_inside_cycle_emits_two_paths",
    "test_all_triads",
    "test_all_triplets",
    "test_asia_graph_dsep",
    "test_asteroidal",
    "test_average_clustering",
    "test_bidirectional_dijksta_restricted",
    "test_bidirectional_dijkstra_ignore",
    "test_bidirectional_dijkstra_no_path",
    "test_bidirectional_shortest_path_ignore",
    "test_bidirectional_shortest_path_restricted_cycle",
    "test_bidirectional_shortest_path_restricted_directed_cycle",
    "test_bidirectional_shortest_path_restricted_wheel",
    "test_boundary",
    "test_bridges",
    "test_chains",
    "test_chordal",
    "test_circle_graph",
    "test_clique",
    "test_cluster",
    "test_collider_graph_dsep",
    "test_communicability",
    "test_complete",
    "test_connected_double_edge_swap",
    "test_connected_double_edge_swap_not_connected",
    "test_connected_double_edge_swap_small",
    "test_core",
    "test_covering",
    "test_cutoff_zero",
    "test_cuts",
    "test_cycles",
    "test_cyclic_graphs_raise_error",
    "test_d_separation",
    "test_dag",
    "test_degree_seq_c4",
    "test_digraph_all_simple_edge_paths_with_two_targets_cutoff",
    "test_digraph_all_simple_edge_paths_with_two_targets_emits_two_paths",
    "test_digraph_all_simple_paths_with_two_targets_cutoff",
    "test_digraph_all_simple_paths_with_two_targets_emits_two_paths",
    "test_directed",
    "test_directed_degree_sequence",
    "test_directed_weighted_shortest_simple_path",
    "test_directed_weighted_shortest_simple_path_issue2427",
    "test_distance_measures",
    "test_distance_regular",
    "test_dominance",
    "test_dominating",
    "test_dominating_set",
    "test_double_edge_swap",
    "test_double_edge_swap_seed",
    "test_double_edge_swap_small",
    "test_double_edge_swap_tries",
    "test_edge_cutoff_zero",
    "test_edge_source_missing",
    "test_edge_target_missing",
    "test_efficiency",
    "test_empty_graph_hash",
    "test_euler",
    "test_fork_graph_dsep",
    "test_get_moral_graph",
    "test_graph1",
    "test_graph2",
    "test_graph_hashing",
    "test_graphical",
    "test_grid_graph",
    "test_hamiltonian__edge_path",
    "test_hamiltonian_path",
    "test_hierarchy",
    "test_hierarchy_1",
    "test_hierarchy_cycle",
    "test_hierarchy_exception",
    "test_hierarchy_tree",
    "test_hierarchy_weight",
    "test_hybrid",
    "test_invalid_half_edge",
    "test_invalid_nodes_raise_error",
    "test_is_aperiodic_bipartite",
    "test_is_aperiodic_cycle",
    "test_is_aperiodic_cycle2",
    "test_is_aperiodic_cycle3",
    "test_is_aperiodic_cycle4",
    "test_is_aperiodic_disconnected",
    "test_is_aperiodic_disconnected2",
    "test_is_aperiodic_raise",
    "test_is_aperiodic_rary_tree",
    "test_is_aperiodic_selfloop",
    "test_is_at_free",
    "test_is_dominating_set",
    "test_is_isolate",
    "test_is_triad",
    "test_isolate",
    "test_isolates",
    "test_lattice_reference",
    "test_link_prediction",
    "test_lowest_common_ancestors",
    "test_markov_condition",
    "test_matching",
    "test_max_weight_clique",
    "test_minors",
    "test_mis",
    "test_moral",
    "test_multi_sequence",
    "test_multiple_component_graph1",
    "test_multiple_component_graph2",
    "test_naive_bayes_dsep",
    "test_negative_input",
    "test_non_integer_input",
    "test_non_randomness",
    "test_normalized",
    "test_number_of_isolates",
    "test_numpy_degree_sequence",
    "test_omega",
    "test_one_node_graph",
    "test_path_graph_dsep",
    "test_planar_drawing",
    "test_planarity",
    "test_pseudo_sequence",
    "test_raise_dominating_set",
    "test_random_reference",
    "test_random_triad",
    "test_reciprocity",
    "test_regular",
    "test_relabel",
    "test_rich_club_exception2",
    "test_richclub",
    "test_richclub2",
    "test_richclub3",
    "test_richclub4",
    "test_richclub_exception",
    "test_richclub_normalized",
    "test_richclub_seed",
    "test_shortest_simple_paths",
    "test_shortest_simple_paths_directed",
    "test_shortest_simple_paths_directed_with_weight_fucntion",
    "test_shortest_simple_paths_with_weight_fucntion",
    "test_sigma",
    "test_similarity",
    "test_simple_paths",
    "test_small_directed_sequences",
    "test_small_graph",
    "test_small_graph_false",
    "test_small_graph_true",
    "test_smallworld",
    "test_smetric",
    "test_source_missing",
    "test_spanner_invalid_stretch",
    "test_spanner_trivial",
    "test_spanner_unweighted_complete_graph",
    "test_spanner_unweighted_disconnected_graph",
    "test_spanner_unweighted_gnp_graph",
    "test_spanner_weighted_complete_graph",
    "test_spanner_weighted_gnp_graph",
    "test_sparsifiers",
    "test_ssp_multigraph",
    "test_ssp_source_missing",
    "test_ssp_source_missing2",
    "test_ssp_target_missing",
    "test_string_input",
    "test_structuralholes",
    "test_summarization",
    "test_swap",
    "test_target_missing",
    "test_three_node_graph",
    "test_threshold",
    "test_tournament",
    "test_triad_type",
    "test_triadic_census",
    "test_triadic_census_nodelist",
    "test_triads",
    "test_triads_by_type",
    "test_triangulate_embedding1",
    "test_triangulate_embedding2",
    "test_two_node_graph",
    "test_undirected_graphs_are_not_supported",
    "test_valid_degree_sequence1",
    "test_valid_degree_sequence2",
    "test_vitality",
    "test_voronoi",
    "test_weight_name",
    "test_weighted_shortest_simple_path",
    "test_weighted_shortest_simple_path_issue2427",
    "test_wiener",
    "test_wikipedia_is_dominating_set",
    "three_node_clique",
    "three_node_independent_set",
    "tree_all_pairs_lca",
    "two_node_graph",
    "validate_length_path",
    "validate_path",
    "verify_clique",
]
