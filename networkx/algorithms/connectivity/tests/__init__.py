def lazy_import(module_name, submodules, submod_attrs):
    import sys
    import importlib
    import importlib.util

    all_funcs = []
    for mod, funcs in submod_attrs.items():
        all_funcs.extend(funcs)
    name_to_submod = {
        func: mod for mod, funcs in submod_attrs.items() for func in funcs
    }

    def require(fullname):
        if fullname in sys.modules:
            return sys.modules[fullname]
        spec = importlib.util.find_spec(fullname)
        try:
            module = importlib.util.module_from_spec(spec)
        except Exception:
            raise ImportError(
                "Could not lazy import module {fullname}".format(fullname=fullname)
            ) from None
        loader = importlib.util.LazyLoader(spec.loader)
        sys.modules[fullname] = module
        loader.exec_module(module)
        return module

    def __getattr__(name):
        if name in submodules:
            fullname = "{module_name}.{name}".format(module_name=module_name, name=name)
            attr = require(fullname)
        elif name in name_to_submod:
            modname = name_to_submod[name]
            module = importlib.import_module(
                "{module_name}.{modname}".format(
                    module_name=module_name, modname=modname
                )
            )
            attr = getattr(module, name)
        else:
            raise AttributeError(
                "No {module_name} attribute {name}".format(
                    module_name=module_name, name=name
                )
            )
        globals()[name] = attr
        return attr

    return __getattr__


__getattr__ = lazy_import(
    __name__,
    submodules={
        "test_connectivity",
        "test_cuts",
        "test_disjoint_paths",
        "test_edge_augmentation",
        "test_edge_kcomponents",
        "test_kcomponents",
        "test_kcutsets",
        "test_stoer_wagner",
    },
    submod_attrs={
        "test_connectivity": [
            "TestAllPairsNodeConnectivity",
            "flow_funcs",
            "test_articulation_points",
            "test_average_connectivity",
            "test_average_connectivity_directed",
            "test_brandes_erlebach",
            "test_complete_graphs",
            "test_cutoff",
            "test_directed_edge_connectivity",
            "test_dodecahedral",
            "test_edge_connectivity_flow_vs_stoer_wagner",
            "test_edge_missing_source",
            "test_edge_missing_target",
            "test_empty_graphs",
            "test_icosahedral",
            "test_interface_only_source",
            "test_interface_only_target",
            "test_invalid_auxiliary",
            "test_missing_source",
            "test_missing_target",
            "test_not_connected",
            "test_not_weakly_connected",
            "test_octahedral",
            "test_petersen",
            "test_tutte",
            "test_white_harary_1",
            "test_white_harary_2",
        ],
        "test_cuts": [
            "flow_funcs",
            "test_articulation_points",
            "test_brandes_erlebach_book",
            "test_edge_cutset_random_graphs",
            "test_empty_graphs",
            "test_icosahedral_cutset",
            "test_interface_only_source",
            "test_interface_only_target",
            "test_invalid_auxiliary",
            "test_missing_source",
            "test_missing_target",
            "test_node_cutset_exception",
            "test_node_cutset_random_graphs",
            "test_not_connected",
            "test_not_weakly_connected",
            "test_octahedral_cutset",
            "test_petersen_cutset",
            "test_unbounded",
            "test_white_harary_paper",
            "tests_min_cut_complete",
            "tests_min_cut_complete_directed",
            "tests_minimum_st_node_cut",
        ],
        "test_disjoint_paths": [
            "are_edge_disjoint_paths",
            "are_node_disjoint_paths",
            "flow_funcs",
            "is_path",
            "test_cutoff_disjoint_paths",
            "test_florentine_families",
            "test_graph_from_pr_2053",
            "test_icosahedral_disjoint_paths",
            "test_invalid_auxiliary",
            "test_isolated_edges",
            "test_isolated_nodes",
            "test_karate",
            "test_missing_source_edge_paths",
            "test_missing_source_node_paths",
            "test_missing_target_edge_paths",
            "test_missing_target_node_paths",
            "test_not_connected_edges",
            "test_not_connected_nodes",
            "test_not_weakly_connected_edges",
            "test_not_weakly_connected_nodes",
            "test_octahedral_disjoint_paths",
            "test_petersen_disjoint_paths",
        ],
        "test_edge_augmentation": [
            "MAX_EFFICIENT_K",
            "tarjan_bridge_graph",
            "test_barbell",
            "test_bridge",
            "test_clique_and_node",
            "test_cliques",
            "test_configuration",
            "test_edgeless_graph",
            "test_gnp_augmentation",
            "test_invalid_k",
            "test_is_k_edge_connected",
            "test_is_k_edge_connected_exceptions",
            "test_is_locally_k_edge_connected",
            "test_is_locally_k_edge_connected_exceptions",
            "test_karate",
            "test_null_graph",
            "test_point_graph",
            "test_shell",
            "test_star",
            "test_tarjan",
            "test_unfeasible",
            "test_weight_key",
        ],
        "test_edge_kcomponents": [
            "fset",
            "test_bridge_cc",
            "test_configuration",
            "test_configuration_directed",
            "test_directed_aux_graph",
            "test_empty_input",
            "test_five_clique",
            "test_four_clique",
            "test_general_k_edge_subgraph_quick_return",
            "test_karate",
            "test_karate_directed",
            "test_local_subgraph_difference",
            "test_local_subgraph_difference_directed",
            "test_not_implemented",
            "test_random_gnp",
            "test_random_gnp_directed",
            "test_shell",
            "test_shell_directed",
            "test_tarjan_bridge",
            "test_triangles",
            "test_undirected_aux_graph",
            "test_zero_k_exception",
        ],
        "test_kcomponents": [
            "test_configuration",
            "test_davis_southern_women",
            "test_davis_southern_women_detail_3_and_4",
            "test_directed",
            "test_karate",
            "test_karate_component_number",
            "test_random_gnp",
            "test_set_consolidation_rosettacode",
            "test_shell",
            "test_torrents_and_ferraro_graph",
            "torrents_and_ferraro_graph",
        ],
        "test_kcutsets": [
            "MAX_CUTSETS_TO_TEST",
            "flow_funcs",
            "graph_example_1",
            "test_alternative_flow_functions",
            "test_articulation_points",
            "test_complete_graph",
            "test_configuration",
            "test_cycle_graph",
            "test_disconnected_graph",
            "test_example_1",
            "test_grid_2d_graph",
            "test_is_separating_set",
            "test_is_separating_set_complete_graph",
            "test_karate",
            "test_non_repeated_cuts",
            "test_random_gnp",
            "test_shell",
            "test_torrents_and_ferraro_graph",
            "torrents_and_ferraro_graph",
        ],
        "test_stoer_wagner": [
            "test_exceptions",
            "test_graph1",
            "test_graph2",
            "test_graph3",
            "test_weight_name",
        ],
    },
)


def __dir__():
    return __all__


__all__ = [
    "MAX_CUTSETS_TO_TEST",
    "MAX_EFFICIENT_K",
    "TestAllPairsNodeConnectivity",
    "are_edge_disjoint_paths",
    "are_node_disjoint_paths",
    "flow_funcs",
    "fset",
    "graph_example_1",
    "is_path",
    "tarjan_bridge_graph",
    "test_alternative_flow_functions",
    "test_articulation_points",
    "test_average_connectivity",
    "test_average_connectivity_directed",
    "test_barbell",
    "test_brandes_erlebach",
    "test_brandes_erlebach_book",
    "test_bridge",
    "test_bridge_cc",
    "test_clique_and_node",
    "test_cliques",
    "test_complete_graph",
    "test_complete_graphs",
    "test_configuration",
    "test_configuration_directed",
    "test_connectivity",
    "test_cutoff",
    "test_cutoff_disjoint_paths",
    "test_cuts",
    "test_cycle_graph",
    "test_davis_southern_women",
    "test_davis_southern_women_detail_3_and_4",
    "test_directed",
    "test_directed_aux_graph",
    "test_directed_edge_connectivity",
    "test_disconnected_graph",
    "test_disjoint_paths",
    "test_dodecahedral",
    "test_edge_augmentation",
    "test_edge_connectivity_flow_vs_stoer_wagner",
    "test_edge_cutset_random_graphs",
    "test_edge_kcomponents",
    "test_edge_missing_source",
    "test_edge_missing_target",
    "test_edgeless_graph",
    "test_empty_graphs",
    "test_empty_input",
    "test_example_1",
    "test_exceptions",
    "test_five_clique",
    "test_florentine_families",
    "test_four_clique",
    "test_general_k_edge_subgraph_quick_return",
    "test_gnp_augmentation",
    "test_graph1",
    "test_graph2",
    "test_graph3",
    "test_graph_from_pr_2053",
    "test_grid_2d_graph",
    "test_icosahedral",
    "test_icosahedral_cutset",
    "test_icosahedral_disjoint_paths",
    "test_interface_only_source",
    "test_interface_only_target",
    "test_invalid_auxiliary",
    "test_invalid_k",
    "test_is_k_edge_connected",
    "test_is_k_edge_connected_exceptions",
    "test_is_locally_k_edge_connected",
    "test_is_locally_k_edge_connected_exceptions",
    "test_is_separating_set",
    "test_is_separating_set_complete_graph",
    "test_isolated_edges",
    "test_isolated_nodes",
    "test_karate",
    "test_karate_component_number",
    "test_karate_directed",
    "test_kcomponents",
    "test_kcutsets",
    "test_local_subgraph_difference",
    "test_local_subgraph_difference_directed",
    "test_missing_source",
    "test_missing_source_edge_paths",
    "test_missing_source_node_paths",
    "test_missing_target",
    "test_missing_target_edge_paths",
    "test_missing_target_node_paths",
    "test_node_cutset_exception",
    "test_node_cutset_random_graphs",
    "test_non_repeated_cuts",
    "test_not_connected",
    "test_not_connected_edges",
    "test_not_connected_nodes",
    "test_not_implemented",
    "test_not_weakly_connected",
    "test_not_weakly_connected_edges",
    "test_not_weakly_connected_nodes",
    "test_null_graph",
    "test_octahedral",
    "test_octahedral_cutset",
    "test_octahedral_disjoint_paths",
    "test_petersen",
    "test_petersen_cutset",
    "test_petersen_disjoint_paths",
    "test_point_graph",
    "test_random_gnp",
    "test_random_gnp_directed",
    "test_set_consolidation_rosettacode",
    "test_shell",
    "test_shell_directed",
    "test_star",
    "test_stoer_wagner",
    "test_tarjan",
    "test_tarjan_bridge",
    "test_torrents_and_ferraro_graph",
    "test_triangles",
    "test_tutte",
    "test_unbounded",
    "test_undirected_aux_graph",
    "test_unfeasible",
    "test_weight_key",
    "test_weight_name",
    "test_white_harary_1",
    "test_white_harary_2",
    "test_white_harary_paper",
    "test_zero_k_exception",
    "tests_min_cut_complete",
    "tests_min_cut_complete_directed",
    "tests_minimum_st_node_cut",
    "torrents_and_ferraro_graph",
]
